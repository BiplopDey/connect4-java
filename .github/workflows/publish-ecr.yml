name: ecr-publish

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: connect4

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/maven-setup
      - name: Package the app
        run: mvn --batch-mode verify
      - run: mkdir staging && cp target/*.jar staging
      - name: Upload artifactory
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: staging
          retention-days: 1

  ecr:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep -oP '(?<=<version>)[^<]+' pom.xml | sed -n 2p)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.version }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Verify tags are available
        run: |
          set -e
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.version }}
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Test /isHealthy endpoint
        run: |
          set -e
          IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.version }}
          
          echo "Running container…"
          CID=$(docker run -d -p 8080:8080 "$IMAGE")
          
          for i in {1..30}; do
            if curl -fs http://localhost:8080/isHealthy | grep -q "Is healthy"; then
              echo "✅ Endpoint OK"
              docker stop "$CID"
              exit 0
            fi
            echo "Waiting the app to start… ($i/30)"
            sleep 1
          done
          
          echo "The app did not respond"
          docker logs "$CID"
          docker stop "$CID"
          exit 1